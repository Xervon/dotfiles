* User Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Mika Dede"
      user-mail-address "me@mde.de.com")
#+END_SRC

* Mail Configuration
#+BEGIN_SRC emacs-lisp
(setq message-sendmail-f-is-evil nil
      message-sendmail-envelope-from 'header)
#+END_SRC

** Open Notmuch with (SPC m)
#+BEGIN_SRC emacs-lisp
(defun my--notmuch-search-unread ()
  (interactive)
  (notmuch-search "tag:unread" t))

(map! :leader
      :desc "Unread Mails" "m" #'my--notmuch-search-unread)
#+END_SRC

** Compose mail with (C-x m)
#+BEGIN_SRC emacs-lisp
(map! :prefix "C-x"
      :desc "Compose mail" "m" #'+notmuch/compose)
#+END_SRC

** Set Fcc Header
#+BEGIN_SRC emacs-lisp
(setq notmuch-fcc-dirs "sent +sent -unread")
#+END_SRC

* Set Leader Keys
#+BEGIN_SRC emacs-lisp
(setq doom-leader-key      "SPC"
      doom-localleader-key ",")
#+END_SRC

* Design
** Set Font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Source Code Pro" :size 18 :weight 'normal)
      doom-variable-pitch-font (font-spec :family "sans" :size 18))
#+END_SRC

** Set Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-solarized-dark)
#+END_SRC

* Editor Configuration
** Set Line Numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

** CamelCase Motion
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

** Disable evil-snipe
#+BEGIN_SRC emacs-lisp
(evil-snipe-mode 0)
#+END_SRC

* Find file in dotfiles
#+BEGIN_SRC emacs-lisp
(defun my--find-file-in-dotfiles ()
 (interactive)
 (cd "~/.cache/dotfiles")
 (+default/find-file-under-here))

(map! :leader
      :desc "Find file in dotfiles" "e" #'my--find-file-in-dotfiles)
#+END_SRC

* Org-Mode Configuration
** Epresent
*** Setup
#+BEGIN_SRC emacs-lisp
(use-package! epresent)
#+END_SRC

*** Start/Stop Presentation
#+BEGIN_SRC emacs-lisp :capture no
(after! epresent
  (defun my--epresent-run ()
    (interactive)
    (let ((present-buffer (current-buffer))
          (frame (epresent--get-frame)))
      (select-frame frame)
      (switch-to-buffer (make-temp-name "epresent-"))
      (insert-buffer present-buffer)
      (toggle-frame-fullscreen)
      (epresent-mode)
      (evil-force-normal-state)))
  (advice-add 'epresent-run :override #'my--epresent-run)

  (defun my--epresent-quit (orig-fun &rest args)
    (let ((frame (epresent--get-frame)))
      (apply orig-fun args)
      (kill-buffer)
      (delete-frame frame)))
  (advice-add 'epresent-quit :around #'my--epresent-quit))
#+END_SRC

#+RESULTS:

*** Keybindings
#+BEGIN_SRC emacs-lisp
(map! :map epresent-mode-map
      :n "q"    #'epresent-quit
      :n "t"    #'epresent-top
      :n "j"    #'scroll-up
      :n "k"    #'scroll-down
      :n "l"    #'epresent-next-page
      :n "h"    #'epresent-previous-page
      :n "g"    #'epresent-jump-to-page

      :n "x"    #'org-babel-execute-src-block
      :n "c"    #'epresent-next-src-block
      :n "C"    #'epresent-next-src-block
      :n "s"    #'epresent-toggle-hide-src-block
      :n "S"    #'epresent-toggle-hide-src-blocks
      :n "e"    #'org-edit-src-code

      :n "[f5]" #'epresent-edit-text

      :n "+"    #'epresent-increase-inner-border
      :n "-"    #'epresent-decrease-inner-border)
#+END_SRC

#+RESULTS:

* Calendar Configuration
** Default Diary file
#+BEGIN_SRC emacs-lisp
(setq diary-file "~/diary")
#+END_SRC

** Open Calendar with (SPC o c)
#+BEGIN_SRC emacs-lisp
(defun my--calendar-open-mark-diary ()
  (interactive)
  (calendar)
  (diary-mark-entries t))

(map! :leader
       :desc "Calendar" "o c" #'my--calendar-open-mark-diary)
#+END_SRC
